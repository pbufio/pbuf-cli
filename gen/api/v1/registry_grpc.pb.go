// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/registry.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_ListModules_FullMethodName     = "/pbufregistry.v1.Registry/ListModules"
	Registry_GetModule_FullMethodName       = "/pbufregistry.v1.Registry/GetModule"
	Registry_RegisterModule_FullMethodName  = "/pbufregistry.v1.Registry/RegisterModule"
	Registry_PullModule_FullMethodName      = "/pbufregistry.v1.Registry/PullModule"
	Registry_PushModule_FullMethodName      = "/pbufregistry.v1.Registry/PushModule"
	Registry_DeleteModule_FullMethodName    = "/pbufregistry.v1.Registry/DeleteModule"
	Registry_DeleteModuleTag_FullMethodName = "/pbufregistry.v1.Registry/DeleteModuleTag"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	// List all registered modules
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	// Get a module by name
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*Module, error)
	// Register a module
	RegisterModule(ctx context.Context, in *RegisterModuleRequest, opts ...grpc.CallOption) (*Module, error)
	// Pull a module tag
	PullModule(ctx context.Context, in *PullModuleRequest, opts ...grpc.CallOption) (*PullModuleResponse, error)
	// Push a module
	PushModule(ctx context.Context, in *PushModuleRequest, opts ...grpc.CallOption) (*Module, error)
	// Delete a module by name
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error)
	// Delete a specific module tag
	DeleteModuleTag(ctx context.Context, in *DeleteModuleTagRequest, opts ...grpc.CallOption) (*DeleteModuleTagResponse, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, Registry_ListModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, Registry_GetModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RegisterModule(ctx context.Context, in *RegisterModuleRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, Registry_RegisterModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) PullModule(ctx context.Context, in *PullModuleRequest, opts ...grpc.CallOption) (*PullModuleResponse, error) {
	out := new(PullModuleResponse)
	err := c.cc.Invoke(ctx, Registry_PullModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) PushModule(ctx context.Context, in *PushModuleRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, Registry_PushModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error) {
	out := new(DeleteModuleResponse)
	err := c.cc.Invoke(ctx, Registry_DeleteModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteModuleTag(ctx context.Context, in *DeleteModuleTagRequest, opts ...grpc.CallOption) (*DeleteModuleTagResponse, error) {
	out := new(DeleteModuleTagResponse)
	err := c.cc.Invoke(ctx, Registry_DeleteModuleTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	// List all registered modules
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	// Get a module by name
	GetModule(context.Context, *GetModuleRequest) (*Module, error)
	// Register a module
	RegisterModule(context.Context, *RegisterModuleRequest) (*Module, error)
	// Pull a module tag
	PullModule(context.Context, *PullModuleRequest) (*PullModuleResponse, error)
	// Push a module
	PushModule(context.Context, *PushModuleRequest) (*Module, error)
	// Delete a module by name
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error)
	// Delete a specific module tag
	DeleteModuleTag(context.Context, *DeleteModuleTagRequest) (*DeleteModuleTagResponse, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedRegistryServer) GetModule(context.Context, *GetModuleRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedRegistryServer) RegisterModule(context.Context, *RegisterModuleRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModule not implemented")
}
func (UnimplementedRegistryServer) PullModule(context.Context, *PullModuleRequest) (*PullModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullModule not implemented")
}
func (UnimplementedRegistryServer) PushModule(context.Context, *PushModuleRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushModule not implemented")
}
func (UnimplementedRegistryServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedRegistryServer) DeleteModuleTag(context.Context, *DeleteModuleTagRequest) (*DeleteModuleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleTag not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RegisterModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RegisterModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterModule(ctx, req.(*RegisterModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_PullModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PullModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_PullModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PullModule(ctx, req.(*PullModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_PushModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PushModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_PushModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PushModule(ctx, req.(*PushModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteModuleTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteModuleTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_DeleteModuleTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteModuleTag(ctx, req.(*DeleteModuleTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbufregistry.v1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModules",
			Handler:    _Registry_ListModules_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _Registry_GetModule_Handler,
		},
		{
			MethodName: "RegisterModule",
			Handler:    _Registry_RegisterModule_Handler,
		},
		{
			MethodName: "PullModule",
			Handler:    _Registry_PullModule_Handler,
		},
		{
			MethodName: "PushModule",
			Handler:    _Registry_PushModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _Registry_DeleteModule_Handler,
		},
		{
			MethodName: "DeleteModuleTag",
			Handler:    _Registry_DeleteModuleTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/registry.proto",
}
